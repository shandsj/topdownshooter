// --------------------------------------------------------------------------------------------------------------------
// <copyright file="ParticleGeneratorComponent.cs" company="PlaceholderCompany">
// Copyright (c) PlaceholderCompany. All rights reserved.
// </copyright>
// --------------------------------------------------------------------------------------------------------------------

namespace TopDownShooter.Engine
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.Linq;
    using Microsoft.Xna.Framework;
    using Microsoft.Xna.Framework.Graphics;
    using TopDownShooter.Engine.Adapters;
    using TopDownShooter.Engine.Collisions;
    using TopDownShooter.Engine.Messages;

    /// <summary>
    /// Defines a particle generator component.
    /// </summary>
    public class ParticleGeneratorComponent : IComponent
    {
        private readonly List<Particle> particles;

        private readonly Random random;

        private readonly IEnumerable<string> textureNames;

        private readonly List<Texture2D> textures = new List<Texture2D>();

        /// <summary>
        /// Initializes a new instance of the <see cref="ParticleGeneratorComponent"/> class.
        /// </summary>
        /// <param name="random">The random instance.</param>
        /// <param name="textureNames">A collection of texture asset names.</param>
        /// <param name="colors">A colleciton of colors.</param>
        public ParticleGeneratorComponent(Random random, IEnumerable<string> textureNames, IEnumerable<Color> colors)
        {
            this.random = random;
            this.textureNames = textureNames;
            this.particles = new List<Particle>();
            this.Colors = new List<Color>(colors);

            this.MaximumTimeToLive = TimeSpan.FromMilliseconds(10);
            this.MinimumTimeToLive = TimeSpan.FromMilliseconds(5);
            this.MaximumSize = 1f;
            this.MinimumSize = .5f;
            this.Count = 200;
        }

        /// <summary>
        /// Gets the collection of <see cref="Color" /> values used for particles.
        /// </summary>
        public List<Color> Colors { get; }

        /// <summary>
        /// Gets or sets the number of particles.
        /// </summary>
        public int Count { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this <see cref="ParticleGeneratorComponent" /> is emitting.
        /// </summary>
        public bool IsEmitting { get; set; }

        /// <summary>
        /// Gets or sets the maximum size of the particles.
        /// </summary>
        public float MaximumSize { get; set; }

        /// <summary>
        /// Gets or sets the maximum time to live.
        /// </summary>
        public TimeSpan MaximumTimeToLive { get; set; }

        /// <summary>
        /// Gets or sets the maximum velocity of the <see cref="Particle" /> objects generated by this <see cref="ParticleGeneratorComponent" />.
        /// </summary>
        public Vector2 MaximumVelocity { get; set; }

        /// <summary>
        /// Gets or sets the minimum size of the particles.
        /// </summary>
        public float MinimumSize { get; set; }

        /// <summary>
        /// Gets or sets the minimum time to live.
        /// </summary>
        public TimeSpan MinimumTimeToLive { get; set; }

        /// <summary>
        /// Gets or sets the minimum velocity of the <see cref="Particle" /> objects generated by this <see cref="ParticleGeneratorComponent" />.
        /// </summary>
        public Vector2 MinimumVelocity { get; set; }

        /// <summary>
        /// Destroys the component.
        /// </summary>
        public void Destroy()
        {
        }

        /// <summary>
        /// Draws the component with the specified game object and game time.
        /// </summary>
        /// <param name="gameObject">The game object.</param>
        /// <param name="camera">The <see cref="ICamera2DAdapter" />.</param>
        /// <param name="spriteBatch">The sprite batch adapter.</param>
        /// <param name="time">The game time.</param>
        public void Draw(IGameObject gameObject, ICamera2DAdapter camera, ISpriteBatchAdapter spriteBatch, GameTime time)
        {
            foreach (var particle in this.particles)
            {
                particle.Draw(camera, spriteBatch, time);
            }
        }

        /// <summary>
        /// Initializes the component.
        /// </summary>
        public void Initialize()
        {
        }

        /// <summary>
        /// Loads the content from the specified content manager adapter.
        /// </summary>
        /// <param name="contentManager">The content manager adapter.</param>
        public void LoadContent(IContentManagerAdapter contentManager)
        {
            foreach (var textureName in this.textureNames)
            {
                this.textures.Add(contentManager.Load<Texture2D>(textureName));
            }
        }

        /// <summary>
        /// Receives a message.
        /// </summary>
        /// <param name="gameObject">The game object.</param>
        /// <param name="message">The message object.</param>
        /// <param name="gameTime">The game time.</param>
        public void ReceiveMessage(IGameObject gameObject, Message message, GameTime gameTime)
        {
        }

        /// <summary>
        /// Updates the component with the specified game object and game time.
        /// </summary>
        /// <param name="gameObject">The game object to update.</param>
        /// <param name="gameTime">The game time.</param>
        public void Update(IGameObject gameObject, GameTime gameTime)
        {
            int total = this.Count;

            for (int particle = 0; particle < this.particles.Count; particle++)
            {
                this.particles[particle].Update(gameTime);
                if (this.particles[particle].TTL <= 0)
                {
                    this.particles.RemoveAt(particle);
                    particle--;
                }
            }

            if (this.IsEmitting)
            {
                var count = this.particles.Count;
                for (int i = count; i < this.Count; i++)
                {
                    this.particles.Add(this.GenerateNewParticle(gameObject.Position));
                }
            }
        }

        private Particle GenerateNewParticle(Vector2 position)
        {
            Texture2D texture = this.textures[this.random.Next(this.textures.Count)];

            var velocity = new Vector2(
                (float)((this.random.NextDouble() * (this.MaximumVelocity.X - this.MinimumVelocity.X)) + this.MinimumVelocity.X),
                (float)((this.random.NextDouble() * (this.MaximumVelocity.Y - this.MinimumVelocity.Y)) + this.MinimumVelocity.Y));

            float angle = 0;
            float angularVelocity = 0.1f * (float)((this.random.NextDouble() * 2) - 1);

            Debug.Assert(this.Colors.Count > 0, "Colors are added by now");
            var colorIndex = this.random.Next(0, this.Colors.Count);
            var color = this.Colors.ElementAt(colorIndex);

            float size = (float)((this.random.NextDouble() * (this.MaximumSize - this.MinimumSize)) + this.MinimumSize);
            int ttl = this.random.Next((int)this.MinimumTimeToLive.TotalMilliseconds, (int)this.MaximumTimeToLive.TotalMilliseconds);

            return new Particle(CollisionSystem.NextGameObjectId++, texture, position, velocity, angle, angularVelocity, color, size, ttl);
        }
    }
}